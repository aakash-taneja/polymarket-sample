{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.injectBuilderHeaders = exports.createL2Headers = exports.createL1Headers = void 0;\nconst tslib_1 = require(\"tslib\");\nconst signing_1 = require(\"../signing\");\nconst createL1Headers = (signer, chainId, nonce, timestamp) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n  let ts = Math.floor(Date.now() / 1000);\n  if (timestamp !== undefined) {\n    ts = timestamp;\n  }\n  let n = 0; // Default nonce is 0\n  if (nonce !== undefined) {\n    n = nonce;\n  }\n  const sig = yield (0, signing_1.buildClobEip712Signature)(signer, chainId, ts, n);\n  const address = yield signer.getAddress();\n  const headers = {\n    POLY_ADDRESS: address,\n    POLY_SIGNATURE: sig,\n    POLY_TIMESTAMP: `${ts}`,\n    POLY_NONCE: `${n}`\n  };\n  return headers;\n});\nexports.createL1Headers = createL1Headers;\nconst createL2Headers = (signer, creds, l2HeaderArgs, timestamp) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\n  let ts = Math.floor(Date.now() / 1000);\n  if (timestamp !== undefined) {\n    ts = timestamp;\n  }\n  const address = yield signer.getAddress();\n  const sig = (0, signing_1.buildPolyHmacSignature)(creds.secret, ts, l2HeaderArgs.method, l2HeaderArgs.requestPath, l2HeaderArgs.body);\n  const headers = {\n    POLY_ADDRESS: address,\n    POLY_SIGNATURE: sig,\n    POLY_TIMESTAMP: `${ts}`,\n    POLY_API_KEY: creds.key,\n    POLY_PASSPHRASE: creds.passphrase\n  };\n  return headers;\n});\nexports.createL2Headers = createL2Headers;\nconst injectBuilderHeaders = (l2Header, builderHeaders) => Object.assign(Object.assign({}, l2Header), builderHeaders);\nexports.injectBuilderHeaders = injectBuilderHeaders;","map":{"version":3,"names":["signing_1","require","createL1Headers","signer","chainId","nonce","timestamp","tslib_1","__awaiter","ts","Math","floor","Date","now","undefined","n","sig","buildClobEip712Signature","address","getAddress","headers","POLY_ADDRESS","POLY_SIGNATURE","POLY_TIMESTAMP","POLY_NONCE","exports","createL2Headers","creds","l2HeaderArgs","buildPolyHmacSignature","secret","method","requestPath","body","POLY_API_KEY","key","POLY_PASSPHRASE","passphrase","injectBuilderHeaders","l2Header","builderHeaders","Object","assign"],"sources":["../../src/headers/index.ts"],"sourcesContent":[null],"mappings":";;;;;;;AAEA,MAAAA,SAAA,GAAAC,OAAA;AAIO,MAAMC,eAAe,GAAGA,CAC3BC,MAA8B,EAC9BC,OAAc,EACdC,KAAc,EACdC,SAAkB,KACKC,OAAA,CAAAC,SAAA;EACvB,IAAIC,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC;EACtC,IAAIP,SAAS,KAAKQ,SAAS,EAAE;IACzBL,EAAE,GAAGH,SAAS;;EAElB,IAAIS,CAAC,GAAG,CAAC,CAAC,CAAC;EACX,IAAIV,KAAK,KAAKS,SAAS,EAAE;IACrBC,CAAC,GAAGV,KAAK;;EAGb,MAAMW,GAAG,GAAG,MAAM,IAAAhB,SAAA,CAAAiB,wBAAwB,EAACd,MAAM,EAAEC,OAAO,EAAEK,EAAE,EAAEM,CAAC,CAAC;EAClE,MAAMG,OAAO,GAAG,MAAMf,MAAM,CAACgB,UAAU,EAAE;EAEzC,MAAMC,OAAO,GAAG;IACZC,YAAY,EAAEH,OAAO;IACrBI,cAAc,EAAEN,GAAG;IACnBO,cAAc,EAAE,GAAGd,EAAE,EAAE;IACvBe,UAAU,EAAE,GAAGT,CAAC;GACnB;EACD,OAAOK,OAAO;AAClB,CAAC;AAzBYK,OAAA,CAAAvB,eAAe,GAAAA,eAAA;AA2BrB,MAAMwB,eAAe,GAAGA,CAC3BvB,MAA8B,EAC9BwB,KAAkB,EAClBC,YAA0B,EAC1BtB,SAAkB,KACKC,OAAA,CAAAC,SAAA;EACvB,IAAIC,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC;EACtC,IAAIP,SAAS,KAAKQ,SAAS,EAAE;IACzBL,EAAE,GAAGH,SAAS;;EAElB,MAAMY,OAAO,GAAG,MAAMf,MAAM,CAACgB,UAAU,EAAE;EAEzC,MAAMH,GAAG,GAAG,IAAAhB,SAAA,CAAA6B,sBAAsB,EAC9BF,KAAK,CAACG,MAAM,EACZrB,EAAE,EACFmB,YAAY,CAACG,MAAM,EACnBH,YAAY,CAACI,WAAW,EACxBJ,YAAY,CAACK,IAAI,CACpB;EAED,MAAMb,OAAO,GAAG;IACZC,YAAY,EAAEH,OAAO;IACrBI,cAAc,EAAEN,GAAG;IACnBO,cAAc,EAAE,GAAGd,EAAE,EAAE;IACvByB,YAAY,EAAEP,KAAK,CAACQ,GAAG;IACvBC,eAAe,EAAET,KAAK,CAACU;GAC1B;EAED,OAAOjB,OAAO;AAClB,CAAC;AA7BYK,OAAA,CAAAC,eAAe,GAAAA,eAAA;AA+BrB,MAAMY,oBAAoB,GAAGA,CAChCC,QAAsB,EACtBC,cAAoC,KACdC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACnBH,QAAQ,GACRC,cAAc,CACI;AANZf,OAAA,CAAAa,oBAAoB,GAAAA,oBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}