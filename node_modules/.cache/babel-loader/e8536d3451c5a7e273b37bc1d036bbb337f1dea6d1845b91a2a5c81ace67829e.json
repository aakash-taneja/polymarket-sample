{"ast":null,"code":"var _jsxFileName = \"/Users/aakash/Documents/madhav-client/hunch_sample_frontned/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport WalletConnection from './components/WalletConnection';\nimport MarketSelector from './components/MarketSelector';\nimport OrderBook from './components/OrderBook';\nimport TradeInterface from './components/TradeInterface';\nimport { ClobClient, OrderType } from '@polymarket/clob-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [clobClient, setClobClient] = useState(null);\n  const [clobClientReady, setClobClientReady] = useState(false);\n  const [markets, setMarkets] = useState([]);\n  const [selectedMarket, setSelectedMarket] = useState(null);\n  const [orderBook, setOrderBook] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Initialize CLOB client when wallet is connected\n  useEffect(() => {\n    if (account && provider) {\n      initializeClobClient();\n    }\n  }, [account, provider]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const initializeClobClient = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('Starting CLOB client initialization...');\n      const host = 'https://clob.polymarket.com';\n      const signer = provider.getSigner();\n      console.log('Creating CLOB client instance...');\n      // Try initializing without API key first\n      const client = new ClobClient(host, 137, signer);\n\n      // Test if the client works for basic operations\n      console.log('Testing client with a simple operation...');\n      try {\n        // Try to get order book for a known token to test the client\n        const testTokenId = \"60487116984468020978247225474488676749601001829886755968952521846780452448915\"; // From the API response\n        const testOrderBook = await client.getOrderBook(testTokenId);\n        console.log('Client test successful:', testOrderBook);\n      } catch (testError) {\n        console.warn('Client test failed, but continuing:', testError);\n      }\n\n      // Set the client\n      setClobClient(client);\n      setClobClientReady(true);\n      console.log('CLOB client initialized successfully');\n    } catch (err) {\n      console.error('Failed to initialize CLOB client:', err);\n      setError(`Failed to initialize trading client: ${err.message}`);\n      setClobClientReady(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchMarkets = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Use CRA proxy (setupProxy.js)\n      const response = await fetch('/api/polymarket/markets?ascending=false&volume_num_min=1000&closed=false&limit=10');\n      if (!response.ok) {\n        throw new Error('Failed to fetch markets');\n      }\n      const marketsData = await response.json();\n      const activeMarkets = [];\n      for (const market of marketsData) {\n        if (market.active && market.volume > 0) {\n          // Get token IDs for this market\n          const tokensResponse = await fetch(`/api/polymarket/markets/${market.id}`);\n          if (tokensResponse.ok) {\n            const marketData = await tokensResponse.json();\n            let tokens = marketData.clobTokenIds || '';\n            tokens = JSON.parse(tokens);\n            if (tokens.length >= 2) {\n              activeMarkets.push({\n                id: market.id,\n                question: market.question,\n                yesTokenId: tokens[0],\n                noTokenId: tokens[1],\n                endDate: market.endDate,\n                volume: market.volume,\n                description: market.description || market.question\n              });\n            }\n          }\n        }\n      }\n      setMarkets(activeMarkets);\n      console.log('Fetched markets:', activeMarkets);\n    } catch (err) {\n      console.error('Failed to fetch markets:', err);\n      setError('Failed to fetch markets. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const checkMarketOrderBook = async tokenId => {\n    try {\n      console.log('Fetching order book for token:', tokenId);\n      if (!clobClient || !clobClientReady) {\n        console.warn('CLOB client not ready, using mock data for now');\n        // Return mock order book data for testing\n        return {\n          bids: [{\n            price: \"0.45\",\n            size: \"100\"\n          }, {\n            price: \"0.44\",\n            size: \"200\"\n          }, {\n            price: \"0.43\",\n            size: \"150\"\n          }],\n          asks: [{\n            price: \"0.55\",\n            size: \"100\"\n          }, {\n            price: \"0.56\",\n            size: \"200\"\n          }, {\n            price: \"0.57\",\n            size: \"150\"\n          }],\n          min_order_size: \"5\"\n        };\n      }\n      const orderBookData = await clobClient.getOrderBook(tokenId);\n      console.log('Order book data received:', orderBookData);\n      return orderBookData;\n    } catch (err) {\n      console.error('Failed to fetch order book:', err);\n      console.log('Using mock data as fallback');\n      // Return mock data as fallback\n      return {\n        bids: [{\n          price: \"0.45\",\n          size: \"100\"\n        }, {\n          price: \"0.44\",\n          size: \"200\"\n        }, {\n          price: \"0.43\",\n          size: \"150\"\n        }],\n        asks: [{\n          price: \"0.55\",\n          size: \"100\"\n        }, {\n          price: \"0.56\",\n          size: \"200\"\n        }, {\n          price: \"0.57\",\n          size: \"150\"\n        }],\n        min_order_size: \"5\"\n      };\n    }\n  };\n  const placeOrder = async (tokenId, price, size, side) => {\n    try {\n      if (!clobClient || !clobClientReady) {\n        throw new Error('CLOB client not initialized or not ready');\n      }\n      setLoading(true);\n      setError(null);\n      const orderParams = {\n        tokenID: tokenId,\n        price: price,\n        side: side,\n        size: size\n      };\n      const orderConfig = {\n        tickSize: \"0.001\",\n        negRisk: false\n      };\n      const response = await clobClient.createAndPostOrder(orderParams, orderConfig, OrderType.GTC);\n      console.log('Order placed successfully:', response);\n      return response;\n    } catch (err) {\n      console.error('Failed to place order:', err);\n      setError(`Failed to place order: ${err.message}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83D\\uDE80 Polymarket Trading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Trade on prediction markets with ease\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: !account ? /*#__PURE__*/_jsxDEV(WalletConnection, {\n        onConnect: (acc, prov) => {\n          setAccount(acc);\n          setProvider(prov);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trading-interface\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wallet-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Connected: \", account]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-indicators\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `status ${clobClientReady ? 'ready' : 'loading'}`,\n              children: [\"CLOB Client: \", clobClientReady ? '✅ Ready' : '⏳ Initializing...']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setAccount(null);\n              setProvider(null);\n              setClobClient(null);\n              setClobClientReady(false);\n              setMarkets([]);\n              setSelectedMarket(null);\n              setOrderBook(null);\n            },\n            className: \"disconnect-btn\",\n            children: \"Disconnect\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [error, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setError(null),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 15\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(MarketSelector, {\n          markets: markets,\n          selectedMarket: selectedMarket,\n          onMarketSelect: setSelectedMarket,\n          onFetchMarkets: fetchMarkets\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), selectedMarket && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"market-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: selectedMarket.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"End Date: \", new Date(selectedMarket.endDate).toLocaleDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Volume: $\", selectedMarket.volume.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }, this), selectedMarket && /*#__PURE__*/_jsxDEV(OrderBook, {\n          tokenId: selectedMarket.yesTokenId,\n          onOrderBookUpdate: setOrderBook,\n          onCheckOrderBook: checkMarketOrderBook\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }, this), selectedMarket && !clobClientReady && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"waiting-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u26A0\\uFE0F CLOB client not ready - showing mock data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Real-time data will be available once client initializes.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: initializeClobClient,\n            className: \"retry-btn\",\n            disabled: loading,\n            children: loading ? 'Initializing...' : 'Retry Initialization'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 15\n        }, this), selectedMarket && orderBook && /*#__PURE__*/_jsxDEV(TradeInterface, {\n          market: selectedMarket,\n          orderBook: orderBook,\n          onPlaceOrder: placeOrder,\n          loading: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cZ2hjSiXKLxLFVTqFfpLX5cWMQY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","WalletConnection","MarketSelector","OrderBook","TradeInterface","ClobClient","OrderType","jsxDEV","_jsxDEV","App","_s","account","setAccount","provider","setProvider","clobClient","setClobClient","clobClientReady","setClobClientReady","markets","setMarkets","selectedMarket","setSelectedMarket","orderBook","setOrderBook","loading","setLoading","error","setError","initializeClobClient","console","log","host","signer","getSigner","client","testTokenId","testOrderBook","getOrderBook","testError","warn","err","message","fetchMarkets","response","fetch","ok","Error","marketsData","json","activeMarkets","market","active","volume","tokensResponse","id","marketData","tokens","clobTokenIds","JSON","parse","length","push","question","yesTokenId","noTokenId","endDate","description","checkMarketOrderBook","tokenId","bids","price","size","asks","min_order_size","orderBookData","placeOrder","side","orderParams","tokenID","orderConfig","tickSize","negRisk","createAndPostOrder","GTC","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onConnect","acc","prov","onClick","onMarketSelect","onFetchMarkets","Date","toLocaleDateString","toLocaleString","onOrderBookUpdate","onCheckOrderBook","disabled","onPlaceOrder","_c","$RefreshReg$"],"sources":["/Users/aakash/Documents/madhav-client/hunch_sample_frontned/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport WalletConnection from './components/WalletConnection';\nimport MarketSelector from './components/MarketSelector';\nimport OrderBook from './components/OrderBook';\nimport TradeInterface from './components/TradeInterface';\nimport { ClobClient, OrderType } from '@polymarket/clob-client';\n\nfunction App() {\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [clobClient, setClobClient] = useState(null);\n  const [clobClientReady, setClobClientReady] = useState(false);\n  const [markets, setMarkets] = useState([]);\n  const [selectedMarket, setSelectedMarket] = useState(null);\n  const [orderBook, setOrderBook] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Initialize CLOB client when wallet is connected\n  useEffect(() => {\n    if (account && provider) {\n      initializeClobClient();\n    }\n  }, [account, provider]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const initializeClobClient = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      console.log('Starting CLOB client initialization...');\n      const host = 'https://clob.polymarket.com';\n      const signer = provider.getSigner();\n      \n      console.log('Creating CLOB client instance...');\n      // Try initializing without API key first\n      const client = new ClobClient(host, 137, signer);\n      \n      // Test if the client works for basic operations\n      console.log('Testing client with a simple operation...');\n      try {\n        // Try to get order book for a known token to test the client\n        const testTokenId = \"60487116984468020978247225474488676749601001829886755968952521846780452448915\"; // From the API response\n        const testOrderBook = await client.getOrderBook(testTokenId);\n        console.log('Client test successful:', testOrderBook);\n      } catch (testError) {\n        console.warn('Client test failed, but continuing:', testError);\n      }\n      \n      // Set the client\n      setClobClient(client);\n      setClobClientReady(true);\n      \n      console.log('CLOB client initialized successfully');\n    } catch (err) {\n      console.error('Failed to initialize CLOB client:', err);\n      setError(`Failed to initialize trading client: ${err.message}`);\n      setClobClientReady(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchMarkets = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Use CRA proxy (setupProxy.js)\n      const response = await fetch('/api/polymarket/markets?ascending=false&volume_num_min=1000&closed=false&limit=10');\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch markets');\n      }\n\n      const marketsData = await response.json();\n      const activeMarkets = [];\n\n      for (const market of marketsData) {\n        if (market.active && market.volume > 0) {\n          // Get token IDs for this market\n          const tokensResponse = await fetch(`/api/polymarket/markets/${market.id}`);\n          if (tokensResponse.ok) {\n            const marketData = await tokensResponse.json();\n            let tokens = marketData.clobTokenIds || '';\n            tokens = JSON.parse(tokens);\n            \n            if (tokens.length >= 2) {\n              activeMarkets.push({\n                id: market.id,\n                question: market.question,\n                yesTokenId: tokens[0],\n                noTokenId: tokens[1],\n                endDate: market.endDate,\n                volume: market.volume,\n                description: market.description || market.question\n              });\n            }\n          }\n        }\n      }\n\n      setMarkets(activeMarkets);\n      console.log('Fetched markets:', activeMarkets);\n    } catch (err) {\n      console.error('Failed to fetch markets:', err);\n      setError('Failed to fetch markets. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const checkMarketOrderBook = async (tokenId) => {\n    try {\n      console.log('Fetching order book for token:', tokenId);\n      \n      if (!clobClient || !clobClientReady) {\n        console.warn('CLOB client not ready, using mock data for now');\n        // Return mock order book data for testing\n        return {\n          bids: [\n            { price: \"0.45\", size: \"100\" },\n            { price: \"0.44\", size: \"200\" },\n            { price: \"0.43\", size: \"150\" }\n          ],\n          asks: [\n            { price: \"0.55\", size: \"100\" },\n            { price: \"0.56\", size: \"200\" },\n            { price: \"0.57\", size: \"150\" }\n          ],\n          min_order_size: \"5\"\n        };\n      }\n\n      const orderBookData = await clobClient.getOrderBook(tokenId);\n      console.log('Order book data received:', orderBookData);\n      return orderBookData;\n    } catch (err) {\n      console.error('Failed to fetch order book:', err);\n      console.log('Using mock data as fallback');\n      // Return mock data as fallback\n      return {\n        bids: [\n          { price: \"0.45\", size: \"100\" },\n          { price: \"0.44\", size: \"200\" },\n          { price: \"0.43\", size: \"150\" }\n        ],\n        asks: [\n          { price: \"0.55\", size: \"100\" },\n          { price: \"0.56\", size: \"200\" },\n          { price: \"0.57\", size: \"150\" }\n        ],\n        min_order_size: \"5\"\n      };\n    }\n  };\n\n  const placeOrder = async (tokenId, price, size, side) => {\n    try {\n      if (!clobClient || !clobClientReady) {\n        throw new Error('CLOB client not initialized or not ready');\n      }\n\n      setLoading(true);\n      setError(null);\n\n      const orderParams = {\n        tokenID: tokenId,\n        price: price,\n        side: side,\n        size: size,\n      };\n\n      const orderConfig = {\n        tickSize: \"0.001\",\n        negRisk: false\n      };\n\n      const response = await clobClient.createAndPostOrder(\n        orderParams,\n        orderConfig,\n        OrderType.GTC\n      );\n\n      console.log('Order placed successfully:', response);\n      return response;\n    } catch (err) {\n      console.error('Failed to place order:', err);\n      setError(`Failed to place order: ${err.message}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>🚀 Polymarket Trading</h1>\n        <p>Trade on prediction markets with ease</p>\n      </header>\n\n      <main className=\"App-main\">\n        {!account ? (\n          <WalletConnection \n            onConnect={(acc, prov) => {\n              setAccount(acc);\n              setProvider(prov);\n            }}\n          />\n        ) : (\n          <div className=\"trading-interface\">\n            <div className=\"wallet-info\">\n              <p>Connected: {account}</p>\n              <div className=\"status-indicators\">\n                <span className={`status ${clobClientReady ? 'ready' : 'loading'}`}>\n                  CLOB Client: {clobClientReady ? '✅ Ready' : '⏳ Initializing...'}\n                </span>\n              </div>\n              <button \n                onClick={() => {\n                  setAccount(null);\n                  setProvider(null);\n                  setClobClient(null);\n                  setClobClientReady(false);\n                  setMarkets([]);\n                  setSelectedMarket(null);\n                  setOrderBook(null);\n                }}\n                className=\"disconnect-btn\"\n              >\n                Disconnect\n              </button>\n            </div>\n\n            {error && (\n              <div className=\"error-message\">\n                {error}\n                <button onClick={() => setError(null)}>×</button>\n              </div>\n            )}\n\n            {loading && (\n              <div className=\"loading\">\n                <div className=\"spinner\"></div>\n                <p>Loading...</p>\n              </div>\n            )}\n\n            <MarketSelector \n              markets={markets}\n              selectedMarket={selectedMarket}\n              onMarketSelect={setSelectedMarket}\n              onFetchMarkets={fetchMarkets}\n            />\n\n            {selectedMarket && (\n              <div className=\"market-details\">\n                <h3>{selectedMarket.question}</h3>\n                <p>End Date: {new Date(selectedMarket.endDate).toLocaleDateString()}</p>\n                <p>Volume: ${selectedMarket.volume.toLocaleString()}</p>\n              </div>\n            )}\n\n            {selectedMarket && (\n              <OrderBook \n                tokenId={selectedMarket.yesTokenId}\n                onOrderBookUpdate={setOrderBook}\n                onCheckOrderBook={checkMarketOrderBook}\n              />\n            )}\n\n            {selectedMarket && !clobClientReady && (\n              <div className=\"waiting-message\">\n                <p>⚠️ CLOB client not ready - showing mock data</p>\n                <p>Real-time data will be available once client initializes.</p>\n                <button \n                  onClick={initializeClobClient}\n                  className=\"retry-btn\"\n                  disabled={loading}\n                >\n                  {loading ? 'Initializing...' : 'Retry Initialization'}\n                </button>\n              </div>\n            )}\n\n            {selectedMarket && orderBook && (\n              <TradeInterface \n                market={selectedMarket}\n                orderBook={orderBook}\n                onPlaceOrder={placeOrder}\n                loading={loading}\n              />\n            )}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}