{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateOrderBookSummaryHash = exports.decimalPlaces = exports.roundUp = exports.roundDown = exports.roundNormal = exports.orderToJson = void 0;\nconst order_utils_1 = require(\"@polymarket/order-utils\");\nconst crypto_1 = require(\"crypto\");\nconst types_1 = require(\"./types\");\nfunction orderToJson(order, owner, orderType) {\n  let side = types_1.Side.BUY;\n  if (order.side == order_utils_1.Side.BUY) {\n    side = types_1.Side.BUY;\n  } else {\n    side = types_1.Side.SELL;\n  }\n  return {\n    order: {\n      salt: parseInt(order.salt, 10),\n      maker: order.maker,\n      signer: order.signer,\n      taker: order.taker,\n      tokenId: order.tokenId,\n      makerAmount: order.makerAmount,\n      takerAmount: order.takerAmount,\n      side,\n      expiration: order.expiration,\n      nonce: order.nonce,\n      feeRateBps: order.feeRateBps,\n      signatureType: order.signatureType,\n      signature: order.signature\n    },\n    owner,\n    orderType\n  };\n}\nexports.orderToJson = orderToJson;\nconst roundNormal = (num, decimals) => {\n  if ((0, exports.decimalPlaces)(num) <= decimals) {\n    return num;\n  }\n  return Math.round((num + Number.EPSILON) * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\nexports.roundNormal = roundNormal;\nconst roundDown = (num, decimals) => {\n  if ((0, exports.decimalPlaces)(num) <= decimals) {\n    return num;\n  }\n  return Math.floor(num * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\nexports.roundDown = roundDown;\nconst roundUp = (num, decimals) => {\n  if ((0, exports.decimalPlaces)(num) <= decimals) {\n    return num;\n  }\n  return Math.ceil(num * Math.pow(10, decimals)) / Math.pow(10, decimals);\n};\nexports.roundUp = roundUp;\nconst decimalPlaces = num => {\n  if (Number.isInteger(num)) {\n    return 0;\n  }\n  const arr = num.toString().split(\".\");\n  if (arr.length <= 1) {\n    return 0;\n  }\n  return arr[1].length;\n};\nexports.decimalPlaces = decimalPlaces;\n/**\n * Calculates the hash for the given orderbook\n * @param orderbook\n * @returns\n */\nconst generateOrderBookSummaryHash = orderbook => {\n  orderbook.hash = \"\";\n  const hash = (0, crypto_1.createHash)(\"sha1\").update(JSON.stringify(orderbook)).digest(\"hex\");\n  orderbook.hash = hash;\n  return hash;\n};\nexports.generateOrderBookSummaryHash = generateOrderBookSummaryHash;","map":{"version":3,"names":["order_utils_1","require","crypto_1","types_1","orderToJson","order","owner","orderType","side","Side","BUY","SELL","salt","parseInt","maker","signer","taker","tokenId","makerAmount","takerAmount","expiration","nonce","feeRateBps","signatureType","signature","exports","roundNormal","num","decimals","decimalPlaces","Math","round","Number","EPSILON","pow","roundDown","floor","roundUp","ceil","isInteger","arr","toString","split","length","generateOrderBookSummaryHash","orderbook","hash","createHash","update","JSON","stringify","digest"],"sources":["../src/utilities.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}